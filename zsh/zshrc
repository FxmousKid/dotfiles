IS_SUDO=0
function check_and_install_packages {
	# Checks if fastfetch is install
	if [[ $(command -v $1 &> /dev/null) -ne 1 ]]; then
		return
	fi

	# loops on some popular distros install
	if [[ -f /etc/os-release && $IS_SUDO -eq 0 ]] ; then 
		echo "Enter Password to install $1"
		IS_SUDO=1
	fi
	if [ -f /etc/os-release ]; then
		. /etc/os-release
		case "$ID" in 
			fedora-asahi-remix | fedora)
				sudo dnf install $1
				;;
			arch)
				sudo pacman -S $1
				;;
			debian)
				sudo apt install $1
				;;
			ubuntu)
				echo "Please install $1 in the correct way from their github"
				;;
			*)
				echo "Sorry, your distro $ID is not supported for auto-download, please post a pull request\
					on my dotfiles repo for the .zshrc file to add to this section a case for your distro" 
				;;
		esac
	else
		echo "Unable to read /etc/os-release"
		return		
	fi
}

function check_and_install_lazygit {
	if [[ $(command -v lazygit &> /dev/null) -ne 0 ]]; then
		if [[ $IS_SUDO -eq 1 ]]; then
			sudo dnf copr enable atim/lazygit -y
		else
			echo "Please enable the atim/lazygit copr repository"
			sudo dnf copr enable atim/lazygit -y
			IS_SUDO=1
		fi
	fi
	check_and_install_packages "lazygit"
}

function check_and_install_all_packages {
	check_and_install_packages "fastfetch"
	check_and_install_packages "go"
	check_and_install_packages "glow"
	check_and_install_packages "strace"
	check_and_install_packages "tree"
	check_and_install_lazygit
}

check_and_install_all_packages

alias fastfetch_fedora_linux="fastfetch --logo \"fedora-linux\" --logo-padding-top 2"
fastfetch_fedora_linux

# XDG Directories
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi



#------------- Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust
#------------- End of Zinit's installer chunk



#------------- Created by Zap installer
[ -f "${XDG_DATA_HOME:-$HOME/.local/share}/zap/zap.zsh" ] && source "${XDG_DATA_HOME:-$HOME/.local/share}/zap/zap.zsh"
plug "zsh-users/zsh-autosuggestions"
plug "zap-zsh/supercharge"
plug "zap-zsh/zap-prompt"
plug "zsh-users/zsh-syntax-highlighting"

# Load and initialise completion system
autoload -Uz compinit
compinit
#-------------- End of Zap installer


#--------- Powerlevel10k x Pure prompt via Zinit
zinit ice depth=1; zinit light romkatv/powerlevel10k


# To customize prompt, run `p10k configure` or edit $HOME/.p10k.zsh.
[[ ! -f $HOME/.p10k.zsh ]] || source ~/.p10k.zsh # i dont even know what this shit does..
#--------- End of Powerlevel10k x Pure prompt 



#--------- Node Version Manager
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
#--------- Node Version Manager




# ||| EXPORTS |||
export PATH="$HOME/Documents/Scripts/build/bin:$PATH"
export PATH="$HOME/.local/funcheck/host:$PATH"
export PATH="$HOME/.atuin/bin:$PATH"
export PATH="$HOME/.config/bin:$PATH"
export PATH="$HOME/.yazi/target/release:$PATH"
export PATH="/usr/lib/java/bin:$PATH"
export JAVA_HOME="/usr/lib/jvm/java/"

# ||| ALIASES |||
alias y="$HOME/.yazi/target/release/yazi"
alias ccw="cc -Wall -Wextra -Werror"
alias norm="norminette -R CheckForbiddenSourceHeader"
alias cl="clear"
alias e="exit ; clear" 
alias fzf='ag -l -g "" | fzf' # fuzzy-finder
alias szh="source $ZSHRC" # source-zshrc
alias ezh="lvim $ZSHRC"
alias open="xdg-open"
alias elc="lvim $HOME/.config/lvim/config.lua" # edit-lunarvim-config
alias elp="lvim $HOME/.config/lvim/lua/plugins.lua" # edit-lunarvim-plugins

alias trsh="alias prev=\"cd \$PWD\" &&
			cd \"$HOME/.local/share/Trash/files\""

alias l="exa"
alias ltr="exa --tree && echo "" && tree | tail -n 1"

alias cmk="compiledb make" #Used for clangd config file, this [compiledb] is a saver
alias visualiser="$HOME/Desktop/Ecole42/42Cursus/Tools/push_swap_visualizer/build/bin/visualizer && rm imgui.ini"
# alias francinette="$HOME/francinette/tester.sh"
# alias paco="$HOME/francinette/tester.sh"

# Application Aliases
alias hypr="Hyprland"
alias ij="/opt/idea-IC/bin/idea.sh --ozone-platform-hint=auto --enable-features=WaylandWindowDecoration"
alias chr="/usr/bin/chromium-browser --ozone-platform-hint=auto --enable-features=WaylandWindowDecoration\
	-enable-features=TouchpadOverscrollHistoryNavigation &"
alias code="/usr/bin/code --ozone-platform-hint=auto --enable-features=WaylandWindowDecoration"
alias discord="/usr/bin/armcord --ozone-platform-hint=auto --enable-features=WaylandWindowDecoration"
alias obsidian="$HOME/.local/bin/Obsidian-1.6.7-arm64.AppImage --ozone-platform-hint=auto --enable-features=WaylandWindowDecoration"
alias ryujinx="gamemoderun DOTNET_EnableAlternateStackCheck=1 GDK_BACKEND=x11 $HOME/.local/share/Ryujinx/Ryujinx"


# Git Aliases
alias gst="git status -b"
alias gls="git ls-files"
alias grm="git rm --cached"
alias gmr="git merge"
alias gft="git fetch"
alias gck="git checkout"
alias gsw="git switch"
alias gcm="git commit -m"
alias gad="git add"
alias grs="git restore --staged"
alias gps="git push"
alias gdf="git diff"
alias gcl="git clone --recurse-submodules"
alias tgt="tree -I ./.git"

alias docfr="mkdir -p $HOME/Documents/France/ ; 
			 cd $HOME/Documents/France/ ;
			 rclone sync GoogleDrive:France . --progress ;
			 yazi"


# ||| evals |||
eval "$(atuin init zsh)"
eval "$(starship init zsh)"


# ||| Changes to bash options |||
unsetopt BEEP 


# ||| GLOBAL ENV VARS |||
export EDITOR="$HOME/.local/bin/lvim"


# opam configuration
[[ ! -r $HOME/.opam/opam-init/init.zsh ]] || source $HOME/.opam/opam-init/init.zsh  > /dev/null 2> /dev/null


. "$HOME/.atuin/bin/env"
